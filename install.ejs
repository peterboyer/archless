#!/bin/env bash

set -x
set -e

<% if (ntp) { %>
  # TODO: check that ntp is set true after reboot
  timedatectl set-ntp true
<% } %>

if [[ -d /sys/firmware/efi/efivars ]]; then
  SCHEME="gpt"
else
  SCHEME="mbr"
fi

<% if (swap === "memory") { %>
  SWAP_GB="$(free --giga | grep Mem | awk '{ print $2 }')"
<% } else { %>
  SWAP_GB="<%= swap %>"
<% } %>

DEV="/dev/$(lsblk | grep disk | awk '{ print $1 }')"
if [[ -n "$(echo $DEV | grep nvme)" ]]; then
  DEV_PRE="p"
else
  DEV_PRE=""
fi

if [[ "$SCHEME" == "gpt" ]]; then
  <% if (!nodisk) { %>
    (
      echo g;
      echo n; echo; echo; echo +300M;
      <% if (swap) { %>
        echo n; echo; echo; echo "+$(expr $SWAP_GB)G";
      <% } %>
      echo n; echo; echo; echo;
      echo w;
    ) | fdisk $DEV --wipe always --wipe-partitions always &>/dev/null
  <% } %>

  DEV_BOOT="${DEV}${DEV_PRE}1"

  <% if (!nodisk) { %>
    mkfs.fat -F 32 $DEV_BOOT
  <% } %>

  <% if (swap) { %>
    DEV_SWAP="${DEV}${DEV_PRE}2"
    <% if (!nodisk) { %>
      mkswap $DEV_SWAP
    <% } %>

    DEV_ROOT="${DEV}${DEV_PRE}3"
    <% if (!nodisk) { %>
      mkfs.<%= fs %> -f $DEV_ROOT
    <% } %>
  <% } else { %>
    DEV_ROOT="${DEV}${DEV_PRE}2"
    <% if (!nodisk) { %>
      mkfs.<%= fs %> -f $DEV_ROOT
    <% } %>
  <% } %>


  <% if (!nodisk) { %>
    mount --mkdir $DEV_ROOT /mnt
    mount --mkdir $DEV_BOOT /mnt/boot
    <% if (swap) { %>
      swapon $DEV_SWAP
    <% } %>
  <% } %>

elif [[ "$SCHEME" == "mbr" ]]; then
  <% if (!nodisk) { %>
    (
      echo o;
      <% if (swap) { %>
        echo n; echo; echo; echo; echo "+$(expr $SWAP_GB)G";
      <% } %>
      echo n; echo; echo; echo; echo;
      echo w;
    ) | fdisk $DEV --wipe always --wipe-partitions always &>/dev/null
  <% } %>

  <% if (swap) { %>
    DEV_SWAP="${DEV}${DEV_PRE}1"
    <% if (!nodisk) { %>
      mkswap $DEV_SWAP
    <% } %>

    DEV_ROOT="${DEV}${DEV_PRE}2"
    <% if (!nodisk) { %>
      mkfs.<%= fs %> -f $DEV_ROOT
    <% } %>
  <% } else { %>
    DEV_ROOT="${DEV}${DEV_PRE}1"
    <% if (!nodisk) { %>
      mkfs.<%= fs %> -f $DEV_ROOT
    <% } %>
  <% } %>

  <% if (!nodisk) { %>
    mount --mkdir $DEV_ROOT /mnt
    <% if (swap) { %>
      swapon $DEV_SWAP
    <% } %>
  <% } %>
else
  echo panic: SCHEME invalid/not detected
  exit 1;
fi

<% if (!nosync) { %>
  <% if (!noreflector) { %>
    reflector
  <% } %>

  pacman -Sy --noconfirm archlinux-keyring

  UCODE_PACKAGE=""
  <% if (ucode === "auto") { %>
    if [[ -n "$(lscpu | grep GenuineIntel)" ]]; then
      UCODE_PACKAGE="intel-ucode"
    elif [[ -n "$(lscpu | grep AuthenticAMD)" ]]; then
      UCODE_PACKAGE="amd-ucode"
    fi
  <% } else if (ucode === "intel") { %>
    UCODE_PACKAGE="intel-ucode"
  <% } else if (ucode === "amd") { %>
    UCODE_PACKAGE="amd-ucode"
  <% } %>

  pacstrap /mnt \
    base base-devel linux linux-firmware $UCODE_PACKAGE \
    grub efibootmgr networkmanager sof-firmware
<% } %>

genfstab -U /mnt > /mnt/etc/fstab

arch-chroot /mnt

ln -sf /usr/share/zoneinfo/<%= tz %> /etc/localtime
hwclock --systohc

sed -i 's/#<%= lang %>.UTF-8/<%= lang %>.UTF-8/g' /etc/locale.gen
locale-gen
echo "LANG=<%= lang %>.UTF-8" > /etc/locale.conf

<% if (keymap) { %>
  loadkeys <%= keymap %>
  echo "KEYMAP=<%= keymap %>" > /etc/vconsole.conf
<% } %>

echo "<%= host %>" > /etc/hostname

echo "::1        localhost" >> /etc/hosts
echo "127.0.0.1  localhost" >> /etc/hosts
echo "127.0.1.1  <%= host %>.localdomain <%= host %>" >> /etc/hosts

systemctl enable NetworkManager

# TODO: get password from user input
chpasswd <<< "root:password"

# TODO: remove duplication of scheme detection
if [[ -d /sys/firmware/efi/efivars ]]; then
  SCHEME="gpt"
else
  SCHEME="mbr"
fi

# TODO: remove duplication of DEV resolving
DEV="/dev/$(lsblk | grep disk | awk '{ print $1 }')"

if [[ "$SCHEME" == "gpt" ]]; then
  grub-install --target $DEV
elif [[ "$SCHEME" == "mbr" ]]; then
  grub-install --target=i386-pc $DEV
else
  echo panic: SCHEME invalid/not detected
  exit 1;
fi

grub-mkconfig -o /boot/grub/grub.cfg

useradd -mG wheel <%= user %>
# TODO: get password from user input
chpasswd <<< "<%= user %>:password"

sed -i 's/# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/g' /etc/sudoers
